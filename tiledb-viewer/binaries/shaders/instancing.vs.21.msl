#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_ConstantBuffer_ShaderUniforms
{
    float4x4 worldToClipTransform;
    float timestamp;
};

struct VSMain_out
{
    float2 out_var_NGF_UV [[user(locn0)]];
    float4 gl_Position [[position]];
};

struct VSMain_in
{
    float3 in_var_SV_Position [[attribute(0)]];
    float2 in_var_TEXCOORD0 [[attribute(1)]];
};

vertex VSMain_out VSMain(VSMain_in in [[stage_in]], constant type_ConstantBuffer_ShaderUniforms& shaderUniforms [[buffer(0)]], texture_buffer<float> perInstanceData [[texture(0)]], uint gl_InstanceIndex [[instance_id]])
{
    VSMain_out out = {};
    float4 _41 = perInstanceData.read(uint(int(gl_InstanceIndex)));
    float _42 = _41.x;
    float4 _45 = float4(_42, _41.yz, 0.0);
    float _54 = shaderUniforms.timestamp * 0.5;
    float3 _56 = fast::normalize(_45.xyz) * sin(_54);
    float _57 = cos(_54);
    float _58 = _56.x;
    float _59 = _56.y;
    float _60 = _56.z;
    float _66 = -_60;
    float _67 = fma(_66, in.in_var_SV_Position.y, fma(_57, in.in_var_SV_Position.x, _59 * in.in_var_SV_Position.z));
    float _70 = -_58;
    float _71 = fma(_70, in.in_var_SV_Position.z, fma(_57, in.in_var_SV_Position.y, _60 * in.in_var_SV_Position.x));
    float _74 = -_59;
    float _75 = fma(_74, in.in_var_SV_Position.x, fma(_57, in.in_var_SV_Position.z, _58 * in.in_var_SV_Position.y));
    float _79 = fma(_66, in.in_var_SV_Position.z, fma(_70, in.in_var_SV_Position.x, -(_59 * in.in_var_SV_Position.y)));
    float4 _100 = shaderUniforms.worldToClipTransform * ((float4(fma(-_75, _74, fma(_71, _66, fma(_67, _57, _79 * _70))), fma(-_67, _66, fma(_75, _70, fma(_71, _57, _79 * _74))), fma(-_71, _70, fma(_67, _74, fma(_75, _57, _79 * _66))), 1.0) + _45) + float4(0.0, sin(5.0 * fma(_42, _41.y, shaderUniforms.timestamp)), 0.0, 0.0));
    _100.y = _100.y * (-1.0);
    out.gl_Position = _100;
    out.out_var_NGF_UV = in.in_var_TEXCOORD0;
    return out;
}

/**NGF_NATIVE_BINDING_MAP
(0 0) : 0
(0 1) : 0
(0 2) : 1
(0 3) : 0
(-1 -1) : -1
**/
